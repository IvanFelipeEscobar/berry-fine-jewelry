define(["exports","./e_edison","./e_ui_page_files_router","./c_core_i18n","./c_lodash-es_lodash","./c_profile_services_profile_services_constants","metaserver/static/js/modules/constants/login_and_register","./c_apex-metrics_src_types"],(function(e,t,n,i,r,s,_,o){"use strict";function c(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var i=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,i.get?i:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,Object.freeze(t)}var l=c(_);const a={};function u(e){const t=r.uniqueId(),n=t=>{let n;try{n=JSON.parse(t.data)}catch(e){return}n&&"db:profile_service:auth_complete"===n.type&&e(n.payload)};return window.addEventListener("message",n),a[t]=n,t}function d(e){const t=a[e];t&&(delete a[e],window.removeEventListener("message",t))}var p,h,v;!function(e){e[e.CONTACTS=0]="CONTACTS",e[e.PROFILE=1]="PROFILE",e[e.PHOTO=2]="PHOTO",e[e.EMAIL=3]="EMAIL",e[e.CALENDAR=4]="CALENDAR",e[e.DOCUMENTS=5]="DOCUMENTS",e[e.CHAT=6]="CHAT",e[e.READ_FILES=7]="READ_FILES",e[e.DIRECTORY_MEMBERS=8]="DIRECTORY_MEMBERS",e[e.CHAT_HISTORY_PUBLIC_CHANNEL=9]="CHAT_HISTORY_PUBLIC_CHANNEL",e[e.CHAT_HISTORY_PRIVATE_CHANNEL=10]="CHAT_HISTORY_PRIVATE_CHANNEL",e[e.CHAT_HISTORY_DIRECT=11]="CHAT_HISTORY_DIRECT",e[e.CHAT_HISTORY_GROUP_DIRECT=12]="CHAT_HISTORY_GROUP_DIRECT",e[e.READ_WIKI=13]="READ_WIKI",e[e.SIGN_IN=14]="SIGN_IN"}(p||(p={})),o.proto3.util.setEnumType(p,"profile_service_permission.ProfileServicePermission",[{no:0,name:"CONTACTS"},{no:1,name:"PROFILE"},{no:2,name:"PHOTO"},{no:3,name:"EMAIL"},{no:4,name:"CALENDAR"},{no:5,name:"DOCUMENTS"},{no:6,name:"CHAT"},{no:7,name:"READ_FILES"},{no:8,name:"DIRECTORY_MEMBERS"},{no:9,name:"CHAT_HISTORY_PUBLIC_CHANNEL"},{no:10,name:"CHAT_HISTORY_PRIVATE_CHANNEL"},{no:11,name:"CHAT_HISTORY_DIRECT"},{no:12,name:"CHAT_HISTORY_GROUP_DIRECT"},{no:13,name:"READ_WIKI"},{no:14,name:"SIGN_IN"}]),function(e){e[e.LINK_DIRECTORY_MEMBERS=0]="LINK_DIRECTORY_MEMBERS",e[e.LINK_CALENDAR=1]="LINK_CALENDAR",e[e.LINK_CONTACTS=2]="LINK_CONTACTS",e[e.LINK_HISTORY=3]="LINK_HISTORY",e[e.LINK_TARGET_USER=4]="LINK_TARGET_USER",e[e.LINK_READ_FILES=5]="LINK_READ_FILES",e[e.LOGIN_USER=6]="LOGIN_USER",e[e.CREATE_USER=7]="CREATE_USER",e[e.ACCESS_FILES_AND_WIKI=8]="ACCESS_FILES_AND_WIKI",e[e.ACCESS_FILES=9]="ACCESS_FILES",e[e.PUBLISH=10]="PUBLISH",e[e.NONE=-1]="NONE"}(h||(h={})),o.proto3.util.setEnumType(h,"profile_service_action.ProfileServiceAction",[{no:0,name:"LINK_DIRECTORY_MEMBERS"},{no:1,name:"LINK_CALENDAR"},{no:2,name:"LINK_CONTACTS"},{no:3,name:"LINK_HISTORY"},{no:4,name:"LINK_TARGET_USER"},{no:5,name:"LINK_READ_FILES"},{no:6,name:"LOGIN_USER"},{no:7,name:"CREATE_USER"},{no:8,name:"ACCESS_FILES_AND_WIKI"},{no:9,name:"ACCESS_FILES"},{no:10,name:"PUBLISH"},{no:-1,name:"NONE"}]),e.AuthWindowOption=void 0,(v=e.AuthWindowOption||(e.AuthWindowOption={})).HIDDEN_IFRAME="hidden_iframe",v.POP_UP="pop_up",v.REDIRECT="redirect";class E{constructor(e,n=null){this.update_on_auth_event=e=>{if(e.user_id===this.user_id){this.is_updated=!1,this.get_or_update_connected_state(!0);for(const e in this.serviceChangeCallbacks)this.serviceChangeCallbacks.hasOwnProperty(e)&&this.serviceChangeCallbacks[e](this)}},t.assert(null!==e,"No user id provided"),this.user_id=e,this.connectedServices={},this.is_updated=!1,this.get_or_update_connected_state(!0,n),this.serviceChangeCallbacks={},u(this.update_on_auth_event)}static get_linked_profile_services_for_user(e,n=null){t.assert(null!==e,"No user_id: LinkedProfileServices.get_linked_profile_services_for_user()");let i=this._LINKED_PROFILE_SERVICES[e];return void 0!==i?i.get_or_update_connected_state(!1,n):(i=new E(e,n),this._LINKED_PROFILE_SERVICES[e]=i),i}get_or_update_connected_state(e=!1,t=null){this.is_updated&&!e?null!==t&&t(this):n.BackgroundRequest({url:"/profile_services/connected_services",subject_user:this.user_id,dataType:"json",success:(e,n,i)=>{this.connectedServices=e,this.is_updated=!0,null!==t&&t(this)}})}connected_accounts_for_service(e){return this.connectedServices[e]?this.connectedServices[e].map((e=>e.source_id)):[]}has_connected_services(){for(const e of s.ProfileServicesConstants.services())if(this.service_is_connected(e))return!0;return!1}has_unconnected_services(e=!1){const t=e?s.ProfileServicesConstants.importable_contact_services():s.ProfileServicesConstants.services();for(const e of t)if(e!==s.ProfileServicesConstants.YAHOO_LEGACY&&!this.service_is_connected(e))return!0;return!1}service_is_connected(e){if(t.assert(-1!==s.ProfileServicesConstants.services().indexOf(e),"Not a valid profile service"),null==this.connectedServices[e])return!1;for(const t of this.connectedServices[e])if(t.connection_state===s.ProfileServicesConstants.IS_CONNECTED)return!0;return!1}service_was_connected(e){if(t.assert(-1!==s.ProfileServicesConstants.services().indexOf(e),"Not a valid profile service"),null==this.connectedServices[e])return!1;for(const t of this.connectedServices[e])if(t.connection_state===s.ProfileServicesConstants.WAS_CONNECTED)return!0;return!1}register_for_service_changes(e,t){return this.serviceChangeCallbacks[e]=t}}E._LINKED_PROFILE_SERVICES={};function f(e){t.assert(null!==e,"No user_id provided to auth_service_with_user");const i=n.Viewer.get_viewer().get_user_by_id(e);t.assert(null!==i,`No user for user_id ${e}`)}function S(e){const t={};return Object.keys(e).forEach((n=>{const i=e[n];null!=i&&(t[n]=i)})),t}e.LinkedProfileServices=E,e.ProfileServicesLinkingHandler=class{constructor(){this._popup_window=null}static show_import_notifications(e){e.success?(n.TeamsWebActionsLogger.log("import_contacts_complete",{provider:s.ProfileServicesConstants.logging_identifiers(e.provider),path:n.get_uri().getPath()}),n.Snackbar.complete(i.intl.formatMessage({id:"JxBPfw",defaultMessage:"Successfully connected {service_name}"},{service_name:s.ProfileServicesConstants.to_name(e.provider)}),"profile-services-link")):null!==e.err_msg?n.Snackbar.fail(e.err_msg,"profile-services-link"):n.Snackbar.fail(i.intl.formatMessage({id:"J+0ZxM",defaultMessage:"Could not complete connection, try again later"}),"profile-services-link")}_close_popup_window(){null!=this._popup_window&&(this._popup_window.close(),this._popup_window=null)}_wait_for_auth_complete(e){return new Promise(((t,n)=>{let i=null;this._close_popup_window();let r=null;const s=u((e=>{if(r=e,!r.settings_config_pending)return d(s),null!=i&&clearInterval(i),this._close_popup_window(),t(e)})),_=e();if(null==_)return n("window_not_created");this._popup_window=_,i=setInterval((()=>{if(!0===_.closed)return r?t(r):(n("window_closed"),d(s),void clearInterval(i))}),1e3)}))}_window_open_features(e){const{width:t,height:n}=s.ProfileServicesConstants.oauth_window_dimensions(e),i={width:t,height:n,resizable:1,scrollbars:1};return Object.keys(i).map((function(e){return`${e}=${i[e]}`})).join(",")}_post_redirect_to_url(i,r,_,o,c=!1){let l;l=o?"/profile_services/redirect_to_identity_provider":i===s.ProfileServicesConstants.CANVAS?"/canvas/select_domain":"/profile_services/start_auth_flow";const a=new t.URI({path:l,query:r}).toString();if(c){const e={success:!0,provider:"",user_id:null,profile:{service_id:"",name:"",given_name:"",family_name:"",email:"",picture_url:"",additional_emails:[],verified_email:!1,organization:""},email_sig:"",refresh_token:"",err_msg:null,localized_error:null,login_info:"",verified_profile_email:!1,should_update_account_photo:!1,remember_me:!1,pair_user:!1,display_name:"",granted_request_types:[],missing_request_types:[],external_service_id:"",dbx_auth:a};return Promise.resolve(e)}return _===e.AuthWindowOption.HIDDEN_IFRAME?this._wait_for_auth_complete((()=>{const e=document.createElement("iframe");return e.src=a,e.style.display="none",e.style.width="0",e.style.height="0",document.body.appendChild(e),e.contentWindow})):_===e.AuthWindowOption.POP_UP?this._wait_for_auth_complete((()=>{const e=s.ProfileServicesConstants.to_name(i),t=this._window_open_features(i);return window.open(a,e,t)})):(n.redirect(a),Promise.reject("redirected"))}_redirect_to_identity_provider(n,i,r,s=null,_=e.AuthWindowOption.POP_UP,o=null,c,a,u,d=!1,p,h){t.assert(null!==n,"No service provided to auth_service_with_user");const v={service:n,is_popup:(_===e.AuthWindowOption.POP_UP).toString(),prompt_select:"true",token:l.REDIRECT_WINDOW_TOKEN,extra_state_parameters:c,login_hint:u,web_signin_tag:h};null!==r&&(v.user_id=r.toString()),v.referrer=s,null==o?v.is_desktop="false":"desktop"===o.kind?(v.is_desktop="true",v.host_nonce=o.host_nonce,v.login_hint=o.login_hint):(v.is_desktop="false",v.remember_me=o.remember_me.toString(),v.cont=o.cont,v.pair_user=o.pair_user.toString()),p&&(v.perms=JSON.stringify(p)),i&&(v.action=i,v.extra_permissions=void 0!==a?JSON.stringify(a):void 0);const E=S(v);return this._post_redirect_to_url(n,E,_,!1,d)}auth_service_with_user_with_landing_page(e,t=void 0){const{landing_page_id:i}=s.ProfileServicesConstants.get_service_data(e);return null!=i?this._wait_for_auth_complete((()=>n.open_tab(`/landing/${i}?return_to_opener=true`,!0))):null!=t?t():Promise.reject("no_landing_page")}auth_service_with_user(e,t,n=null,i=null,r="link_contacts",s,_,o,c,l){this.auth_service_with_user_promise(e,t,i,r,s,_,o,c,l).then(n)}auth_service_with_user_promise(t,n,i=null,r="link_contacts",s,_,o,c,l,a=!1){return f(n),this._redirect_to_identity_provider(t,r,n,i,void 0!==s?s:e.AuthWindowOption.POP_UP,null,_,o,l,a,c)}auth_service_with_specified_user(e,t,n,i){this.auth_service_with_user_promise(e,t,i,"link_target_user").then(n)}auth_service_create_user_if_needed(t,n=null,i=null,r=e.AuthWindowOption.POP_UP,s=null){this._redirect_to_identity_provider(t,"create_user",null,i,r,s).then(n)}auth_service_login_desktop(t,n,i,r=null){const s={kind:"desktop",host_nonce:i,login_hint:r};this._redirect_to_identity_provider(t,"login_user",null,null,e.AuthWindowOption.POP_UP,s).then(n)}auth_service_login_web(e,t,n,i,r,s,_,o){const c={kind:"web",remember_me:r,cont:s,pair_user:_};this._redirect_to_identity_provider(e,"login_user",null,n,i,c,void 0,void 0,void 0,void 0,void 0,o).then(t)}auth_service_link_calendar(t,n,i,r){return f(n),this._redirect_to_identity_provider(t,"link_calendar",n,r,e.AuthWindowOption.POP_UP).then(i)}continue_auth_flow(t){const{user_id:n,service:i,action:r,referrer:s,cont:_,is_popup:o,pair_user:c,is_desktop:a,is_android:u,remember_me:d,host_nonce:p,login_hint:h,prompt_select:v,pkce_challenge:E,extra_state_parameters:f,perms:I}=t,m={service:i,action:"link_contacts",prompt_select:"true",token:l.REDIRECT_WINDOW_TOKEN};m.action=r,null!=n&&(m.user_id=n.toString()),m.cont=_,m.referrer=s,null!=o&&(m.is_popup=o.toString()),null!=c&&(m.pair_user=c.toString()),null!=a&&(m.is_desktop=a.toString()),null!=u&&(m.is_android=u.toString()),null!=d&&(m.remember_me=d.toString()),m.host_nonce=p,m.login_hint=h,null!=v&&(m.prompt_select=v.toString()),null!=E&&(m.pkce_challenge=E),m.extra_state_parameters=f,null!=I&&(m.perms=JSON.stringify(I));const C=S(m);return this._post_redirect_to_url(i,C,e.AuthWindowOption.REDIRECT,!0)}deauth_service(e,i,r=null,_=null){const o=parseInt(i,10);t.assert(-1!==s.ProfileServicesConstants.services().indexOf(e),"Not a valid profile service"),t.assert(null!==o,"No user_id provided"),E.get_linked_profile_services_for_user(o,(i=>{i.service_is_connected(e)||null===_?(null!==r&&t.assert(-1!==i.connected_accounts_for_service(e).indexOf(r),"Service is not currently connected"),n.WebRequest({url:"/profile_services/unlink",subject_user:o,data:{service:e,source_id:r},success:(e,t,n)=>(i.update_on_auth_event({user_id:o}),"function"==typeof _?_(!0):void 0),error:(e,t,n)=>"function"==typeof _?_(!1):void 0})):_(!0)}))}},e.addAuthCompleteListener=u,e.removeAuthCompleteListener=d}));
//# sourceMappingURL=c_profile_services_profile_services_link.js-vflnwS7s3.map
